import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.7e2c98a7.js";const g=JSON.parse('{"title":"和服务端交互","description":"","frontmatter":{},"headers":[],"relativePath":"guide/axios.md","filePath":"guide/axios.md"}'),e={name:"guide/axios.md"},l=p(`<h1 id="和服务端交互" tabindex="-1">和服务端交互 <a class="header-anchor" href="#和服务端交互" aria-label="Permalink to &quot;和服务端交互&quot;">​</a></h1><p>框架使用 <a href="https://github.com/axios/axios" target="_blank" rel="noreferrer">Axios</a> 做为异步请求工具，并进行了简单的封装。</p><h2 id="设置-baseurl" tabindex="-1">设置 baseURL <a class="header-anchor" href="#设置-baseurl" aria-label="Permalink to &quot;设置 baseURL&quot;">​</a></h2><p>在根目录 <code>.env.*</code> 文件里的 <code>VUE_APP_API_ROOT</code> 这个参数就是配置 axios 的 <code>baseURL</code> 。</p><h2 id="拦截器" tabindex="-1">拦截器 <a class="header-anchor" href="#拦截器" aria-label="Permalink to &quot;拦截器&quot;">​</a></h2><p>在 <code>/src/api/index.js</code> 文件里实例化了 axios 对象，并对 <code>request</code> 和 <code>response</code> 设置了拦截器，拦截器的用处就是拦截每一次的请求和响应，然后做一些全局的处理。例如接口响应报错，可以在拦截器里用统一的报错提示来展示，方便业务开发。因为每个公司提供的接口标准不同，所以该文件需要开发者根据实际情况去定制对应的拦截器。</p><p>代码很简单，首先初始化 axios 对象，然后 <code>axios.interceptors.request.use()</code> 和 <code>axios.interceptors.response.use()</code> 就分别是请求和响应的拦截代码了。</p><p>参考代码里只做了简单的拦截处理，例如请求的时候会自动带上 token ，响应的时候会根据错误信息判断是登录失效还是接口报错，并做相应动作，登录失效则跳转至登录页，接口报错则使用 Element UI 的 Message 组件提示用户。</p><h2 id="多数据源" tabindex="-1">多数据源 <a class="header-anchor" href="#多数据源" aria-label="Permalink to &quot;多数据源&quot;">​</a></h2><p>如果项目里需要从多个不同地址的数据源请求数据，你有两种方式可以实现。</p><p>如果只是几个接口需求从其它数据源请求，你可以使用覆盖 <code>baseURL</code> 的方式：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$api.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/new/list&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    baseURL: </span><span style="color:#9ECBFF;">&#39;http://baidu.com/&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 直接覆盖 baseURL</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$api.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/new/list&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    baseURL: </span><span style="color:#032F62;">&#39;http://baidu.com/&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 直接覆盖 baseURL</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>这种方式的前提是，两个数据源的 <code>request</code> 和 <code>response</code> 规则要保持一致，因为只是覆盖 <code>baseURL</code> ，拦截器还是用的同一套规则。</p><p>所以如果两个数据源的请求和响应是完全不同的标准，你需要给第二个数据源单独实例化一个 axios 对象。首先在 <code>.env.*</code> 文件里配置第二个数据源的 <code>baseURL</code> ：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># 命名可随意，以 VUE_APP_ 开头即可</span></span>
<span class="line"><span style="color:#e1e4e8;">VUE_APP_API_ROOT_2 = 此处填写接口地址</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># 命名可随意，以 VUE_APP_ 开头即可</span></span>
<span class="line"><span style="color:#24292e;">VUE_APP_API_ROOT_2 = 此处填写接口地址</span></span></code></pre></div><p>然后把 <code>/src/api/index.js</code> 文件复制一份，例如就叫 <code>/src/api/index2.js</code> ，并且将代码中的 <code>baseURL</code> 替换为 <code>p<wbr>rocess.env.VUE_APP_API_ROOT_2</code> ，最后在 <code>/src/main.js</code> 文件里引入：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> api2 </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./api/index2&#39;</span></span>
<span class="line"><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.$api2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> api2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> api2 </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./api/index2&#39;</span></span>
<span class="line"><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.$api2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> api2</span></span></code></pre></div><p>然后你就可以在页面中通过这种方式分别请求两个数据源的数据了：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 请求默认数据源</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$api.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/new/list&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 请求第 2 个数据源</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$api2.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/new/list&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 请求默认数据源</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$api.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/new/list&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 请求第 2 个数据源</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$api2.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/new/list&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="跨域" tabindex="-1">跨域 <a class="header-anchor" href="#跨域" aria-label="Permalink to &quot;跨域&quot;">​</a></h2><p>生产环境的跨域需要服务端去解决，开发环境的跨域问题可在本地设置代理解决。</p><p>打开 <code>vue.config.js</code> 并将高亮部分代码注释去掉：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    devServer: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        open: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        proxy: {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">                target: p<wbr>rocess.env.</span><span style="color:#79B8FF;">VUE_APP_API_ROOT</span><span style="color:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">                changeOrigin: </span><span style="color:#79B8FF;">true</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">            }</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">    devServer: {</span></span>
<span class="line"><span style="color:#24292E;">        open: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line highlighted"><span style="color:#24292E;">        proxy: {</span></span>
<span class="line highlighted"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">: {</span></span>
<span class="line highlighted"><span style="color:#24292E;">                target: p<wbr>rocess.env.</span><span style="color:#005CC5;">VUE_APP_API_ROOT</span><span style="color:#24292E;">,</span></span>
<span class="line highlighted"><span style="color:#24292E;">                changeOrigin: </span><span style="color:#005CC5;">true</span></span>
<span class="line highlighted"><span style="color:#24292E;">            }</span></span>
<span class="line highlighted"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>同时将 <code>/src/api/index.js</code> 文件里的 <code>baseURL</code> 配置删掉，这时候重新运行框架，请求代理就会生效了。</p><p>假设 <code>VUE_APP_API_ROOT</code> 配置的是 <code>http://baidu.com</code> ，那上述配置的结果就是，在请求 <code>/api/login</code> 时会转发到 <code>http://baidu.com/api/login</code> 。</p><p>更多代理设置请阅读《<a href="https://cli.vuejs.org/zh/config/#devserver-proxy" target="_blank" rel="noreferrer">Vue CLI - devServer.proxy</a>》</p>`,26),o=[l];function c(t,r,i,d,E,y){return a(),n("div",null,o)}const u=s(e,[["render",c]]);export{g as __pageData,u as default};
